{"version":3,"sources":["Panel/Panel.js","InputField/InputField.js","Button/Button.js","RegistrationLink/RegistrationLink.js","LoginPanel/LoginPanel.js","App.js","serviceWorker.js","index.js"],"names":["Panel","react_default","a","createElement","className","this","props","children","Component","InputField","type","id","placeholder","Button","RegistrationLink","LoginPanel","src_Panel_Panel","src_InputField_InputField","src_Button_Button","src_RegistrationLink_RegistrationLink","App","src_LoginPanel_LoginPanel","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yVAgBeA,gMAXP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVC,KAAKC,MAAMC,kBALZC,cCeLC,0LAbP,OACIR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,SAAOO,KAAK,WAAWC,GAAG,WAAWP,UAAU,eAAeQ,YAAY,cAE9EX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,SAAOO,KAAK,WAAWC,GAAG,WAAWP,UAAU,eAAeQ,YAAY,sBARrEJ,cCQVK,0LANP,OACIZ,EAAAC,EAAAC,cAAA,UAAQO,KAAK,SAASN,UAAU,mBAAmBC,KAAKC,MAAMC,iBAHrDC,cCWNM,0LARP,OACIb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVC,KAAKC,MAAMC,iBAJGC,cC2ChBO,0LAnCP,OACId,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACXH,EAAAC,EAAAC,cAACa,EAAD,CAAOL,GAAG,eACNV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAACc,EAAD,SAIZhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBO,GAAG,UAChCV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAACe,EAAD,iBAIZjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBO,GAAG,sBAChCV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAACgB,EAAD,iBAEJlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAACgB,EAAD,4BA1BXX,cCGVY,mLANX,OACEnB,EAAAC,EAAAC,cAACkB,EAAD,aAHYb,aCOEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c3ef1836.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Panel.css'\r\n\r\nclass Panel extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Panel","import React, { Component } from 'react';\r\nimport './InputField.css'\r\n\r\nclass InputField extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"form-group shadow\">\r\n                    <input type=\"username\" id=\"username\" className=\"form-control\" placeholder=\"Username\" />\r\n                </div>\r\n                <div className=\"form-group shadow\">\r\n                    <input type=\"password\" id=\"password\" className=\"form-control\" placeholder=\"Password\" />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InputField","import React, { Component } from 'react';\r\nimport './Button.css'\r\n\r\nclass Button extends Component {\r\n    render() {\r\n        return (\r\n            <button type=\"button\" className=\"btn btn-rounded\">{this.props.children}</button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Button","import React, { Component } from 'react'\r\n//import { Link } from 'react-router-dom';\r\nimport './RegistrationLink.css'\r\n\r\nclass RegistrationLink extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RegistrationLink","import React, { Component } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\nimport Panel from '../Panel/Panel';\r\nimport InputField from '../InputField/InputField';\r\nimport Button from '../Button/Button'\r\nimport RegistrationLink from '../RegistrationLink/RegistrationLink';\r\n\r\nimport './LoginPanel.css';\r\n\r\nclass LoginPanel extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"container-fluid\">\r\n                <div className=\"col-10 mx-auto my-auto\">\r\n                    <Panel id=\"login-panel\">\r\n                        <div className=\"container-fluid\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-7 mx-auto\">\r\n                                    <InputField></InputField>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"container-fluid\" id=\"button\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-7 mx-auto\">\r\n                                    <Button>Login</Button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"container-fluid\" id=\"registration-links\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-6 mx-auto\">\r\n                                    <RegistrationLink>Sign Up</RegistrationLink>\r\n                                </div>\r\n                                <div className=\"col-6 mx-auto\">\r\n                                    <RegistrationLink>Forgot</RegistrationLink>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </Panel>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginPanel;","import { Route, Switch } from 'react-router-dom';\nimport React, { Component } from 'react';\nimport './App.css';\nimport LoginPanel from './LoginPanel/LoginPanel'\n\nclass App extends Component {\n  render() {\n    return (\n      <LoginPanel></LoginPanel>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}